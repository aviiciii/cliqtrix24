// --------XX DEFAULT CODE XX--------
// Constants
BASEURL = "https://api.vercel.com/";
userFirstName = user.get("first_name");
userEmail = user.get("email");
userid = user.get("id");
response = Map();

// Get API KEY
query_map = Map();
query_map.put("criteria","userid==" + userid);
response_map = zoho.cliq.getRecords("verceldb",query_map);
if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
{
	ACCESS_TOKEN = response_map.get("list").get(0).get("apikey");
	headers = Map();
	headers.put("Authorization","Bearer " + ACCESS_TOKEN);
}
else{
	response.put("text", "Please add your API Key first. Use the command `saveapi` to add your API Key.");
	return response;
}
// --------XX DEFAULT CODE XX--------
// Constants


ID = arguments.get("key");

// Get Team Details
endpointUrl = BASEURL + "v13/deployments/" + ID;
// Get Team Details
res = invokeUrl[
	url: endpointUrl
	type: GET
	headers: headers

];

target = "Production";
if(res.get("target") == null)
{
	target = "Pull Request Preview";
}


name = res.get("name");
status = res.get("status");
time = res.get("ready");

ctime = toDateTime(time,"MM-d-yy");

repo = "https://github.com/"+res.get("meta").get("githubOrg") + "/"+ res.get("meta").get("githubRepo");

url = "https://"+res.get("url");

commiter_login= res.get("meta").get("githubCommitAuthorLogin");
commiter_name= res.get("meta").get("githubCommitAuthorName");

response = Map();
response.put("text","Details of your deployments");
bot = Map();
bot.put("name","Vercel ");
response.put("bot",bot);
card = Map();
card.put("title","Deployment Details:");
card.put("theme","modern-inline");
response.put("card",card);
slidesList = list();
slidesList0 = Map();
slidesList0.put("type","text");
slidesList0.put("title","Name:");
slidesList0.put("data",name);
slidesList.add(slidesList0);
slidesList1 = Map();
slidesList1.put("type","text");
slidesList1.put("title","Type:");
slidesList1.put("data",target);
slidesList.add(slidesList1);
slidesList2 = Map();
slidesList2.put("type","text");
slidesList2.put("title","Status:");
slidesList2.put("data",status);
slidesList.add(slidesList2);
slidesList3 = Map();
slidesList3.put("type","text");
slidesList3.put("title","Time:");
slidesList3.put("data",ctime);
slidesList.add(slidesList3);
slidesList4 = Map();
slidesList4.put("type","text");
slidesList4.put("title","Github Repo:");
buttonsList = list();
buttonsList0 = Map();
buttonsList0.put("label","Open in Github");
buttonsList0.put("type","+");
action = Map();
action.put("type","open.url");
data = Map();
data.put("web",repo);
action.put("data",data);
buttonsList0.put("action",action);
buttonsList.add(buttonsList0);
slidesList4.put("buttons",buttonsList);
slidesList4.put("data","Click Below to open in Github");
slidesList.add(slidesList4);
slidesList5 = Map();
slidesList5.put("type","text");
slidesList5.put("title","Preview URL:");
buttonsList = list();
buttonsList0 = Map();
buttonsList0.put("label","View Preview");
buttonsList0.put("type","+");
action = Map();
action.put("type","open.url");
data = Map();
data.put("web",url);
action.put("data",data);
buttonsList0.put("action",action);
buttonsList.add(buttonsList0);
slidesList5.put("buttons",buttonsList);
slidesList5.put("data","Click Below to open Preview url");
slidesList.add(slidesList5);
slidesList6 = Map();
slidesList6.put("type","label");
slidesList6.put("title","Commited By:");
dataList = list();
dataList0 = Map();
dataList0.put("Name",commiter_name);
dataList.add(dataList0);
dataList1 = Map();
dataList1.put("Github Username",commiter_login);
dataList.add(dataList1);
slidesList6.put("data",dataList);
slidesList.add(slidesList6);
response.put("slides",slidesList);
return response;
